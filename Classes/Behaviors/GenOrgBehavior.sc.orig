<<<<<<< HEAD
GenOrgBehavior : CodexHybrid {
	classvar instances;
	var instance, <parameters, synthDefName;

	*initClass { instances = 0 }

	*newMutation { | moduleSet | ^super.newCopyArgs(moduleSet).loadModules }

	initComposite {
		instance = this.increment;
		modules[\behaviorEnvs] = modules.behaviorEnvs; 
		modules[\synthDef] = modules.synthDef;
		super.initComposite;
	}

	name { ^(super.name+/+instance) }

	increment { 
		var tmp = instances; 
		instances = instances + 1; 
		^tmp;
	}

	*makeTemplates { | templater |
		templater.behaviorSynthDef;
		templater.behaviorArgs;
		templater.behaviorEnvWrappers;
		templater.behaviorEnvs;
	}

	arguments { ^modules.behaviorArgs }

	getCurves {
		^this.arguments.collect({|item, index|
			[item, modules[item]];
		}).asPairs(Dictionary);
	}

	free { this.removeSynthDefs }
=======
GenOrgBehavior : Hybrid {
	classvar <instanceCount;
	var <instanceNumber;

	initComposite {
		instanceNumber = this.class.increment;
		super.initComposite;
	}

	*increment {
		instanceCount = instanceCount !? { instanceCount + 1 } ?? { 0 };
		^instanceCount;
	}

	makeTemplates {
		//loads to modules as synthDef, parameters, envs.
		templater.behaviorSynthDef;
		templater.behaviorParameters;
		templater.behaviorEnvs;
	}

	makeSynthDefs {
		//load the synthdef from the synthdef function defined by the module.
		modules[\synthDef] = modules.synthDef;
		super.makeSynthDefs;
	}

	formatName { | string | ^(super.formatName(string)++instanceNumber); }

	free { this.class.removeAt(modules.synthDef.name); }
>>>>>>> 019f4fbd298160601ca22f67f9cda2b4112d2a7c

	play { | buffer, db(-12), outBus(0),
		target(server.defaultGroup), addAction(\addToTail) |
		Synth(
			modules.synthDef.name,
<<<<<<< HEAD
			parameters.getSynthArgs(db, outBus),
=======
			this.getSynthArgs(buffer, db, outBus),
>>>>>>> 019f4fbd298160601ca22f67f9cda2b4112d2a7c
			target,
			addAction
		);
	}

<<<<<<< HEAD
	parameters_{ | newParameters |
		if(newParameters.isKindOf(GenOrgParameters), {
			parameters = newParameters;
=======
	getSynthArgs { | buffer, db(-3), timescale(1.0), outBus(0) |
		var pars = modules.parameters.copy;
		var arr = pars.keys.asArray.collect({ | key |
			var  item = pars[key];
			var lo = this.tag(key, \lo);
			var hi = this.tag(key, \hi);
			[[lo.asSymbol, item.map(0.5.rand)],
				[hi.asSymbol, item.map(0.5.rand+0.5.rand)]];
>>>>>>> 019f4fbd298160601ca22f67f9cda2b4112d2a7c
		});
		arr = arr.add([\buf, buffer, \ampDB, db,
			\out, outBus, \timescale, timescale]);
		^arr.flat;
	}

	mutateWith { | target |
<<<<<<< HEAD
		var child = GenOrgBehavior.newMutation(moduleSet);
		var copyModules = this.mutateModules(target); 
		copyModules.keysValuesDo({ | key, value |
			child[key] = value;
		});
		^child.initComposite;
	}

	mutateModules { | target |
		var tmodules = target.modules, child = (); 
		child.add(\behaviorArgs -> this.mutateSpecs(tmodules)); 
		child.add(\behaviorEnvs -> this.mutateEnvs(tmodules)); 
		child.add(\behaviorEnvsWrappers -> 
			modules.behaviorEnvWrappers.copy);
		child.add(\synthDef -> modules.synthDef.copy); 
		^child;
	}

	mutateEnv { | env0, env1 |
		var levels = this.averageArr(env0.levels, env1.levels);
		var times = this.averageArr(env0.times, env1.times);
		var curves = this.averageArr(env0.curves, env1.curves);
		^Env(levels, times, curves);
	}

	mutateEnvs { | target |
		var tenvs = target.behaviorEnvs, child = (); 
		modules.behaviorEnvs.keyValuesDo({ | key, value | 
			child.add(key -> this.mutateEnv(value, tenvs[key]));
		});
		^child;
	}

	mutateSpecs { | target | 
		var targs = target.behaviorArgs; 
		var child = Dictionary.new;
		modules.behaviorArgs.keyValuesDo({ | key, value | 
			var tval = targs[key];
			var minval = value.minval + tval.minval / 2; 
			var maxval = value.maxval + tval.maxval / 2; 
			var warp = [value.warp, tval.warp].choose;
			child.add(key -> ControlSpec(minval, maxval, warp)); 
		});
	}

	averageArr { | arr0, arr1 |
		if(arr0.size!=arr1.size, { arr1 = arr1.resize(arr0) });
		^(arr0 + arr1 / 2);
	}

	getSynthArgs { 
		var args = modules.behaviorArgs.copy; 
		args.keysValuesDo({ | key, value | 
			args[key] = value.map(1.0.rand); 
		});
		^args.asPairs;
	}

}
=======
		var tmods = target.modules, mutation = ();
		mutation.envs = this.mutateEnvs(tmods.envs);
		mutation.parameters = this.mutateParameters(tmods.parameters);
		^GenOrgBehavior.basicNew
		.getModules(input:mutation)
		.initComposite;
	}

	getModules { | from, input |
		super.getModules(from);
		input !? {
			input.keysDo({ | key | modules[key] = input[key] });
		};
	}

	mutateEnvs { | target |
		var mutation = ();
		modules.envs.keysValuesArrayDo { | key, value |
			var tarItem = target[key];
			var levels = this.averageArr(value.levels, tarItem.levels);
			var times = this.averageArr(value.times, tarItem.times);
			var curves = this.averageArr(value.curves, tarItem.curves);
			mutation[key] = Env(levels, times, curves);
		};
		^mutation;
	}

	averageArr { | arr0, arr1 |
		if(arr0.size != arr1.size, {
			arr1 = arr1.resize(arr0);
		});
		^(arr0 + arr1 / 2);
	}

	mutateParameters { | target |
		var mutataion = ();
		modules.parameters.keysValuesDo({ | key, item |
			var tarItem = target[key];
			mutataion[key] = [
				item.minval + tarItem.minval / 2,
				item.maxval + tarItem.maxval / 2;
				[item.warp + tarItem.warp].choose;
			].asSpec;
		});
		^mutataion;
	}
}
>>>>>>> 019f4fbd298160601ca22f67f9cda2b4112d2a7c
